esphome:
  name: jeu_led_esp32
  platform: ESP32
  board: esp32dev # Ajustez selon votre modèle spécifique

wifi:
  ssid: "VotreSSID"
  password: "VotreMotDePasse"

# Activer le logging
logger:

# Activer les mises à jour OTA
ota:

light:
  - platform: neopixelbus
    id: pixels_score
    type: GRB
    pin: GPIO11 
    num_leds: 7
    name: "Pixels Score"

  - platform: neopixelbus
    id: pixels_ambiance
    type: GRB
    pin: GPIO8
    num_leds: 100
    name: "LEDs Ambiance"

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO2
      mode: INPUT_PULLUP
    name: "Bouton Bleu"
    on_press:
      then:
        - script.execute: increment_score_blue

  - platform: gpio
    pin:
      number: GPIO7
      mode: INPUT_PULLUP
    name: "Bouton Rouge"
    on_press:
      then:
        - script.execute: increment_score_red

  - platform: gpio
    pin:
      number: GPIO4
      mode: INPUT_PULLUP
    name: "Bouton Reset"
    on_press:
      then:
        - script.execute: reset_game
        
globals:
  - id: score_blue
    type: int
    restore_value: no
    initial_value: '0'
  - id: score_red
    type: int
    restore_value: no
    initial_value: '0'
  - id: turn_count
    type: int
    restore_value: no
    initial_value: '0'

script:
  - id: increment_score_blue
    then:
      - lambda: |-
          if (id(turn_count) < 7) {
            id(score_blue) += 1;
            id(turn_count) += 1;
            auto color = light::LightColorValues();
            color.set_rgb(0, 0, 255); // Bleu pour le score du joueur bleu
            id(pixels_score).set_pixel(id(score_blue) - 1, color);
            id(pixels_score).show();
            check_end_game();
          }

  - id: increment_score_red
    then:
      - lambda: |-
          if (id(turn_count) < 7) {
            id(score_red) += 1;
            id(turn_count) += 1;
            auto color = light::LightColorValues();
            color.set_rgb(255, 0, 0); // Rouge pour le score du joueur rouge
            id(pixels_score).set_pixel(id(score_red) - 1, color);
            id(pixels_score).show();
            check_end_game();
          }

  - id: reset_game
    then:
      - lambda: |-
          id(score_blue) = 0;
          id(score_red) = 0;
          id(turn_count) = 0;
          for (int i = 0; i < 7; i++) {
            id(pixels_score).set_pixel(i, light::LightColorValues());
          }
          id(pixels_score).show();

  - id: check_end_game
    then:
      - lambda: |-
          if (id(turn_count) == 7) {
            // Logique pour déterminer et afficher le gagnant
            if (id(score_blue) > id(score_red)) {
              // Bleu gagne
              for (int i = 0; i < id(score_blue); i++) {
                id(pixels_score).set_pixel(i, light::LightColorValues().set_rgb(0, 0, 255));
              }
            } else if (id(score_red) > id(score_blue)) {
              // Rouge gagne
              for (int i = 0; i < id(score_red); i++) {
                id(pixels_score).set_pixel(i, light::LightColorValues().set_rgb(255, 0, 0));
              }
            }
            id(pixels_score).show();
          }
